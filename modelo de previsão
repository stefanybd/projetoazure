1. Criação do Modelo de Previsão

Um exemplo simples utilizando regressão linear para prever valores baseados em uma variável de entrada (vamos supor que estamos prevendo a performance de vendas com base em gastos com marketing). O modelo pode ser feito em Python utilizando a biblioteca scikit-learn.
Exemplo de Código:

# Importando as bibliotecas necessárias
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Criando dados fictícios para o exemplo
# Gastos com Marketing (em milhares) e Vendas (em milhares)
data = {
    'Gastos com Marketing': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Vendas': [3, 5, 7, 8, 10, 12, 14, 16, 18, 20]
}

# Criando um DataFrame com os dados
df = pd.DataFrame(data)

# Dividindo os dados em variáveis independentes (X) e dependentes (y)
X = df[['Gastos com Marketing']]
y = df['Vendas']

# Dividindo o dataset em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criando o modelo de regressão linear
model = LinearRegression()

# Treinando o modelo com os dados de treino
model.fit(X_train, y_train)

# Fazendo previsões com os dados de teste
y_pred = model.predict(X_test)

# Calculando o erro médio quadrado (MSE) para avaliar o modelo
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Plotando os resultados
plt.scatter(X_test, y_test, color='blue', label='Dados reais')
plt.plot(X_test, y_pred, color='red', label='Previsão')
plt.xlabel('Gastos com Marketing (milhares)')
plt.ylabel('Vendas (milhares)')
plt.legend()
plt.show()

2. Passo a Passo no README.md
